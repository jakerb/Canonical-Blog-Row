{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["BlogPosts","props","state","posts","loaded","axios","get","then","response","data","map","post","id","title","parse","rendered","link","thumbnail","image","_embedded","source_url","alt_text","date","moment","format","author","name","setState","Loaded","className","this","key","toString","href","src","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oVAkFeA,G,wDAxEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,MAAO,GAEPC,QAAQ,GANO,E,gEAUE,IAAD,OAElBC,IAAMC,IAAI,uFACPC,MAAK,SAAAC,GAGJ,IAAML,EAAQK,EAASC,KAAKC,KAAI,SAAAC,GAE9B,MAAO,CACLC,GAAID,EAAKC,GACTC,MAAOC,IAAMH,EAAKE,MAAME,UACxBC,KAAML,EAAKK,KACXC,UAAW,CACTC,MAAOP,EAAKQ,UAAU,oBAAoB,GAAGC,WAC7CC,SAAUV,EAAKQ,UAAU,oBAAoB,GAAGE,UAElDC,KAAMC,IAAOZ,EAAKW,MAAME,OAAO,gBAC/BC,OAAQ,CACNC,KAAMf,EAAKQ,UAAUM,OAAO,GAAGC,KAC/BV,KAAML,EAAKQ,UAAUM,OAAO,GAAGT,UAMrC,EAAKW,SAAS,CACZxB,QACAyB,QAAQ,S,+BAMd,OACE,yBAAKC,UAAU,sBACZC,KAAK5B,MAAMC,MAAMO,KAAI,SAAAC,GAAI,OACxB,yBAAKkB,UAAU,6CAA6CE,IAAKpB,EAAKC,GAAGoB,YACrE,4BAAQH,UAAU,4BAChB,wBAAIA,UAAU,mFAAd,qBAEF,yBAAKA,UAAU,6BACb,uBAAGI,KAAMtB,EAAKK,MACZ,yBAAKkB,IAAKvB,EAAKM,UAAUC,MAAOiB,IAAKxB,EAAKM,UAAUI,SAAUQ,UAAU,iCAE1E,wBAAIA,UAAU,2CACZ,uBAAGI,KAAMtB,EAAKK,MAAOL,EAAKE,QAE5B,uBAAGgB,UAAU,6DACX,kCAAO,uBAAGI,KAAMtB,EAAKc,OAAOT,MAAOL,EAAKc,OAAOC,MAA/C,IAA0Df,EAAKW,QAGnE,4BAAQO,UAAU,4BAChB,uBAAGA,UAAU,0BAAb,qB,GA/DQO,IAAMC,YCGVC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.957cc15b.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport moment from 'moment';\nimport parse from 'html-react-parser'\nimport './App.scss';\n\n/*\n * @info BlogPosts Component\n */\nclass BlogPosts extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      posts: [],\n      /* Loaded added for error checking on request failure. */\n      loaded: false\n    };\n  }\n\n  componentDidMount() {\n\n    axios.get('https://admin.insights.ubuntu.com/wp-json/wp/v2/posts?per_page=3&page=1&_embed=True')\n      .then(response => {\n\n        /* Map each post item to return a structure post object.  */\n        const posts = response.data.map(post => {\n\n          return {\n            id: post.id, /* Unique ID */\n            title: parse(post.title.rendered),\n            link: post.link,\n            thumbnail: {\n              image: post._embedded['wp:featuredmedia'][0].source_url,\n              alt_text: post._embedded['wp:featuredmedia'][0].alt_text\n            },\n            date: moment(post.date).format('DD MMMM YYYY'),\n            author: {\n              name: post._embedded.author[0].name,\n              link: post._embedded.author[0].link\n            }\n          }\n\n        });\n\n        this.setState({\n          posts,\n          Loaded: true\n        });\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"row u-equal-height\">\n        {this.state.posts.map(post => \n          <div className=\"col-4 p-card--highlighted blog-item-p-card\" key={post.id.toString()}>\n              <header className=\"blog-item-p-card__header\">\n                <h5 className=\"blog-item-p-card__category p-muted-heading u-no-margin--bottom u-no-margin--top\">Cloud and Server</h5>\n              </header>\n              <div className=\"blog-item-p-card__content\">\n                <a href={post.link}>\n                  <img src={post.thumbnail.image} alt={post.thumbnail.alt_text} className=\"blog-item-p-card__thumbnail\"/>\n                </a>\n                <h3 className=\"p-card__title blog-item-p-card__heading\">\n                  <a href={post.link}>{post.title}</a>\n                </h3>\n                <p className=\"u-no-margin--top blog-item-p-card__info u-no-padding--top\">\n                  <em>By <a href={post.author.link}>{post.author.name}</a> {post.date}</em>\n                </p>\n              </div>\n              <footer className=\"blog-item-p-card__footer\">\n                <p className=\"blog-item-p-card__type\">Article</p>\n              </footer>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\n\nexport default BlogPosts;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}